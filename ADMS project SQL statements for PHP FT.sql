
CREATE OR REPLACE FUNCTION CHECK_UNIQUE_ITEM(I_NO ITEMS.ITEM_NO%TYPE)
RETURN VARCHAR2
IS
C NUMBER(2);
BEGIN
SELECT COUNT(*) INTO C FROM ITEMS WHERE ITEM_NO=I_NO;
IF (C=0) THEN
RETURN 'TRUE';
ELSE
RETURN 'FALSE';
END IF;
END;
==================================================

CREATE OR REPLACE PROCEDURE ADD_ITEM(I_NO ITEMS.ITEM_NO%TYPE, DES ITEMS.DESCRIPTION%TYPE, PRICE ITEMS.PRICE%TYPE, STAT OUT VARCHAR2)
IS
BEGIN
IF (CHECK_UNIQUE_ITEM(I_NO) = 'TRUE') THEN
INSERT INTO ITEMS VALUES (I_NO, DES, PRICE);
STAT := 'Item added successfully !';
ELSE
STAT := 'Item no is not unique !';
END IF;
END;
==================================================

CREATE OR REPLACE PROCEDURE DELETE_ITEM(I_NO ITEMS.ITEM_NO%TYPE, STAT OUT VARCHAR2)
IS
BEGIN
DELETE FROM ITEMS WHERE ITEM_NO=I_NO;
STAT := 'Item deleted !';
END;
==================================================

CREATE OR REPLACE FUNCTION CHECK_UNIQUE_RES(R_NO RESTAURANTS.REG_NUM%TYPE)
RETURN VARCHAR2
IS
C NUMBER(2);
BEGIN
SELECT COUNT(*) INTO C FROM RESTAURANTS WHERE REG_NUM=R_NO;
IF (C=0) THEN
RETURN 'TRUE';
ELSE
RETURN 'FALSE';
END IF;
END;
==================================================

CREATE OR REPLACE PROCEDURE ADD_RES(R_NO RESTAURANTS.REG_NUM%TYPE,NAME RESTAURANTS.NAME%TYPE,BR RESTAURANTS.BRANCH%TYPE,
          CONTACT RESTAURANTS.CONTACT_NUM%TYPE, EMAIL RESTAURANTS.EMAIL%TYPE,MID RESTAURANTS.MANAGER_ID%TYPE, STAT OUT VARCHAR2)
IS
BEGIN
IF (CHECK_UNIQUE_RES(R_NO) = 'TRUE') THEN
INSERT INTO RESTAURANTS VALUES(R_NO,NAME,BR,CONTACT,EMAIL,MID);
STAT := 'Restaurant added successfully !';
ELSE
STAT := 'Reg no is not unique !';
END IF;
END;
==================================================

CREATE OR REPLACE PROCEDURE DELETE_RES(REG RESTAURANTS.REG_NUM%TYPE, STAT OUT VARCHAR2)
IS
BEGIN
DELETE FROM RESTAURANTS WHERE REG_NUM=REG;
STAT := 'Restaurant deleted !';
END;
==================================================


CREATE OR REPLACE FUNCTION CHECK_EXIST_CUSTOMER(MOB CUSTOMERS.PHONE_NUM%TYPE)
RETURN VARCHAR2
IS
C NUMBER(2);
BEGIN
SELECT COUNT(*) INTO C FROM CUSTOMERS WHERE PHONE_NUM=MOB;
IF (C=0) THEN
RETURN 'FALSE';
ELSE
RETURN 'TRUE';
END IF;
END;
==================================================

CREATE OR REPLACE PROCEDURE GET_CUSTOMER_ID(NAME CUSTOMERS.NAME%TYPE, MOB CUSTOMERS.PHONE_NUM%TYPE, ID OUT CUSTOMERS.CUSTOMER_ID%TYPE)
IS
BEGIN
IF(CHECK_EXIST_CUSTOMER(MOB)='TRUE') THEN
SELECT CUSTOMER_ID INTO ID FROM CUSTOMERS WHERE PHONE_NUM=MOB;
ELSE
INSERT INTO CUSTOMERS VALUES (CUSTOMER_SQ.NEXTVAL, NAME, MOB);
SELECT CUSTOMER_ID INTO ID FROM CUSTOMERS WHERE PHONE_NUM=MOB;
END IF;
END;
==================================================
CREATE OR REPLACE PROCEDURE GET_ORDER_ID(C_ID CUSTOMERS.CUSTOMER_ID%TYPE,E_ID EMPLOYEES.EMPLOYEE_ID%TYPE,O_ID OUT ORDERS.ORDER_ID%TYPE)
IS
BEGIN
SELECT ORDER_SQ.NEXTVAL INTO O_ID FROM DUAL;
INSERT INTO ORDERS VALUES (O_ID, '', 'No', C_ID,E_ID);
END;
==================================================
CREATE OR REPLACE PROCEDURE GET_ORDER_ITEMS(O_ID ORDERS.ORDER_ID%TYPE, CART OUT SYS_REFCURSOR)
IS
BEGIN
OPEN CART FOR SELECT * FROM SHOW_CART WHERE ORDER_ID=O_ID;
END;
=================================================
CREATE VIEW SHOW_CART AS SELECT OI.ORDER_ID,OI.ITEM_NO, OI.QUANTITY,(I.PRICE*OI.QUANTITY) AS ITEMTOTAL FROM ORDERED_ITEM OI,ITEMS I WHERE OI.ITEM_NO=I.ITEM_NO
=================================================
CREATE OR REPLACE FUNCTION ITEM_EXIST(I_NO ITEMS.ITEM_NO%TYPE)
RETURN VARCHAR2
IS
C NUMBER(2);
BEGIN
SELECT COUNT(*) INTO C FROM ITEMS WHERE ITEM_NO=I_NO;
IF (C=1) THEN
RETURN 'TRUE';
ELSE
RETURN 'FALSE';
END IF;
END;
============================
CREATE OR REPLACE PROCEDURE ADD_ITEMS_TO_ORDER(O_ID ORDERS.ORDER_ID%TYPE,I_NO ORDERED_ITEM.ITEM_NO%TYPE, QN ORDERED_ITEM.QUANTITY%TYPE, STAT OUT VARCHAR2)
IS
BEGIN
IF(ITEM_EXIST(I_NO)='TRUE') THEN
IF (ITEM_TO_ORDER_EXIST(I_NO,O_ID)='TRUE') THEN
UPDATE ORDERED_ITEM SET QUANTITY=QN WHERE ORDER_ID=O_ID AND ITEM_NO=I_NO;
STAT := 'Item quantity updated';
ELSE
INSERT INTO ORDERED_ITEM VALUES (ORDERED_ITEM_SQ.NEXTVAL,O_ID,I_NO,QN);
STAT := 'Item added to order';
END IF;
ELSE
STAT := 'Wrong item number';
END IF;
END;
==============================

CREATE OR REPLACE FUNCTION ITEM_TO_ORDER_EXIST(I_NO ITEMS.ITEM_NO%TYPE,O_ID ORDERS.ORDER_ID%TYPE )
RETURN VARCHAR2
IS
C NUMBER(2);
BEGIN
SELECT COUNT(*) INTO C FROM ORDERED_ITEM WHERE ORDER_ID=O_ID AND ITEM_NO=I_NO;
IF (C=1) THEN
RETURN 'TRUE';
ELSE
RETURN 'FALSE';
END IF;
END;
======================================

CREATE OR REPLACE PROCEDURE PLACE_ORDER(O_ID ORDERS.ORDER_ID%TYPE, TOTAL ORDERS.AMOUNT%TYPE)
IS
BEGIN
UPDATE ORDERS SET AMOUNT=TOTAL, STATUS='Pending' WHERE ORDER_ID=O_ID;
END;
==================================

CREATE VIEW ORDERS_NOT_SERVED AS SELECT O.ORDER_ID, OI.ITEM_NO, I.DESCRIPTION, O.STATUS FROM
ORDERS O, ITEMS I, ORDERED_ITEM OI WHERE I.ITEM_NO=OI.ITEM_NO AND O.ORDER_ID=OI.ORDER_ID AND (STATUS='Pending' OR STATUS='Cooking')
===========================
CREATE OR REPLACE PROCEDURE GET_UNSERVED_ORDER(ORD OUT SYS_REFCURSOR)
IS
BEGIN
OPEN ORD FOR SELECT * FROM ORDERS_NOT_SERVED;
END;
===================
CREATE VIEW ORDER_TO_DELIVER AS SELECT ORDER_ID, NAME AS
CUSTOMER_NAME, AMOUNT, PHONE_NUM FROM ORDERS,CUSTOMERS WHERE ORDERS.CUSTOMER_ID=CUSTOMERS.CUSTOMER_ID AND STATUS='Waiting del'
=================================
CREATE OR REPLACE FUNCTION CHECK_UNIQUE_EMP(E_ID EMPLOYEES.EMPLOYEE_ID%TYPE)
RETURN VARCHAR2
IS
C NUMBER(2);
BEGIN
SELECT COUNT(*) INTO C FROM EMPLOYEES WHERE EMPLOYEE_ID=E_ID;
IF (C=0) THEN
RETURN 'TRUE';
ELSE
RETURN 'FALSE';
END IF;
END;
=============================================
CREATE OR REPLACE PROCEDURE ADD_EMP(E_ID EMPLOYEES.EMPLOYEE_ID%TYPE,NAME EMPLOYEES.NAME%TYPE,ADD EMPLOYEES.ADDRESS%TYPE,HIRE EMPLOYEES.HIRE_DATE%TYPE,JOB EMPLOYEES.JOB%TYPE, SAL EMPLOYEES.SALARY%TYPE,MOB EMPLOYEE_PHONE.PHONE_NUM%TYPE, M_ID EMPLOYEES.MANAGER_ID%TYPE, STAT OUT VARCHAR2)
IS
BEGIN
IF (CHECK_UNIQUE_EMP(E_ID) = 'TRUE') THEN
INSERT INTO EMPLOYEES VALUES(E_ID,NAME,ADD,TO_DATE(HIRE,'dd-mm-yyyy'),JOB,SAL,M_ID);
INSERT INTO EMPLOYEE_PHONE VALUES(E_ID,MOB);
STAT := 'Employee added !';
ELSE
STAT := 'Employee ID is not unique !';
END IF;
END;
=====================================

CREATE VIEW EMPLOYEE_ALL_INFO AS SELECT E.*, M.NAME AS 
MGR,R.BRANCH FROM EMPLOYEES E, MANAGERS M, RESTAURANTS R WHERE E.MANAGER_ID=M.MANAGER_ID AND M.MANAGER_ID=R.MANAGER_ID
===================

CREATE OR REPLACE PROCEDURE GET_EMP_ALL_INFO(INFO_E OUT SYS_REFCURSOR)
IS
BEGIN
OPEN INFO_E FOR SELECT * FROM EMPLOYEE_ALL_INFO;
END;
==================
CREATE OR REPLACE PROCEDURE DELETE_EMP(E_ID EMPLOYEES.EMPLOYEE_ID%TYPE, STAT OUT VARCHAR2)
IS
BEGIN
DELETE FROM EMPLOYEES WHERE EMPLOYEE_ID=E_ID;
STAT := 'Employee deleted !';
END;
==========================================
CREATE OR REPLACE PROCEDURE EDIT_EMP(E_ID EMPLOYEES.EMPLOYEE_ID%TYPE,NM EMPLOYEES.NAME%TYPE,ADD EMPLOYEES.ADDRESS%TYPE,
HIRE EMPLOYEES.HIRE_DATE%TYPE,JB EMPLOYEES.JOB%TYPE, SAL EMPLOYEES.SALARY%TYPE,M_ID EMPLOYEES.MANAGER_ID%TYPE)
IS
BEGIN
UPDATE EMPLOYEES SET NAME=NM,ADDRESS=ADD,HIRE_DATE=TO_DATE(HIRE,'dd-mm-yyyy'),JOB=JB,SALARY=SAL,MANAGER_ID=M_ID WHERE EMPLOYEE_ID=E_ID;
END;
======================


















